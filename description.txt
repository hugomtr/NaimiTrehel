fonction main()

fonction run()
	-Dans un premier temps la fonction initialise tous les threads 
	c'est à dire un tableau de n_site de threads "envoyeurs"
	et un tableau de n_sites de threads "receveurs"

	-initialisation de tous les tableaux utiles
	(tableaux des last,next,hastoken,request_cs)

	-création des threads (pthread_create) 
	thread receveurs -> traitement_message()
	thread envoyeurs -> travail()


traitement_message()
	création d'un socket server -> socketReceveur()
	-Tant que processus condition de fin non rencontré
		acceptation de connexion entrante ()
		switch case sur le type de message recu:
			TOKEN: token_present = vraie
			REQUEST: 
			si racine
			LIBERATION: 


travail()
	pour de 0 au nombres de CSREQUEST que fera le site
		# simuler des temps aléatoires de CS et de durée de la prise en compte de la requete
		desire_rentrer_en_SC()
		""""
		CS
		""""
		desire_quitter_la_SC()
		

desire_rentrer_en_SC()
	si j'ai un last(pere)
		envoi_message(REQUEST) à mon last
		last = nil
	update les valeurs des propres à l'algo (revoir naimi trehel)

	tant_que je n'ai pas le token
		utilisation d'un verrou


desire_quitter_la_SC()
	je ne demande plus la SC
	si j'ai un next
		envoi_mssage(TOKEN) à mon next
	update les valeurs des propres à l'algo (revoir naimi trehel)


envoi_message() // à chaque appel de la func un socket temporaire est crée pour envoyer un message
	création d'un socket client qui envoie sur le port passé en parametre
	envoi du message
	fermer socket


envoimessage()
	definition d'un socket client
	connexion du socket au server(socket receveur) sur ce meme port
	envoi du message








